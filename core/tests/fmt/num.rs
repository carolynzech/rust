#[test]
fn test_format_int() {
    // Formatting integers should select the right implementation based off
    // the type of the argument. Also, hex/octal/binary should be defined
    // for integers, but they shouldn't emit the negative sign.
    assert_eq!(format!("{}", 1isize), "1");
    assert_eq!(format!("{}", 1i8), "1");
    assert_eq!(format!("{}", 1i16), "1");
    assert_eq!(format!("{}", 1i32), "1");
    assert_eq!(format!("{}", 1i64), "1");
    assert_eq!(format!("{}", -1isize), "-1");
    assert_eq!(format!("{}", -1i8), "-1");
    assert_eq!(format!("{}", -1i16), "-1");
    assert_eq!(format!("{}", -1i32), "-1");
    assert_eq!(format!("{}", -1i64), "-1");
    assert_eq!(format!("{:?}", 1isize), "1");
    assert_eq!(format!("{:?}", 1i8), "1");
    assert_eq!(format!("{:?}", 1i16), "1");
    assert_eq!(format!("{:?}", 1i32), "1");
    assert_eq!(format!("{:?}", 1i64), "1");
    assert_eq!(format!("{:b}", 1isize), "1");
    assert_eq!(format!("{:b}", 1i8), "1");
    assert_eq!(format!("{:b}", 1i16), "1");
    assert_eq!(format!("{:b}", 1i32), "1");
    assert_eq!(format!("{:b}", 1i64), "1");
    assert_eq!(format!("{:x}", 1isize), "1");
    assert_eq!(format!("{:x}", 1i8), "1");
    assert_eq!(format!("{:x}", 1i16), "1");
    assert_eq!(format!("{:x}", 1i32), "1");
    assert_eq!(format!("{:x}", 1i64), "1");
    assert_eq!(format!("{:X}", 1isize), "1");
    assert_eq!(format!("{:X}", 1i8), "1");
    assert_eq!(format!("{:X}", 1i16), "1");
    assert_eq!(format!("{:X}", 1i32), "1");
    assert_eq!(format!("{:X}", 1i64), "1");
    assert_eq!(format!("{:o}", 1isize), "1");
    assert_eq!(format!("{:o}", 1i8), "1");
    assert_eq!(format!("{:o}", 1i16), "1");
    assert_eq!(format!("{:o}", 1i32), "1");
    assert_eq!(format!("{:o}", 1i64), "1");
    assert_eq!(format!("{:e}", 1isize), "1e0");
    assert_eq!(format!("{:e}", 1i8), "1e0");
    assert_eq!(format!("{:e}", 1i16), "1e0");
    assert_eq!(format!("{:e}", 1i32), "1e0");
    assert_eq!(format!("{:e}", 1i64), "1e0");
    assert_eq!(format!("{:E}", 1isize), "1E0");
    assert_eq!(format!("{:E}", 1i8), "1E0");
    assert_eq!(format!("{:E}", 1i16), "1E0");
    assert_eq!(format!("{:E}", 1i32), "1E0");
    assert_eq!(format!("{:E}", 1i64), "1E0");

    assert_eq!(format!("{}", 1usize), "1");
    assert_eq!(format!("{}", 1u8), "1");
    assert_eq!(format!("{}", 1u16), "1");
    assert_eq!(format!("{}", 1u32), "1");
    assert_eq!(format!("{}", 1u64), "1");
    assert_eq!(format!("{:?}", 1usize), "1");
    assert_eq!(format!("{:?}", 1u8), "1");
    assert_eq!(format!("{:?}", 1u16), "1");
    assert_eq!(format!("{:?}", 1u32), "1");
    assert_eq!(format!("{:?}", 1u64), "1");
    assert_eq!(format!("{:b}", 1usize), "1");
    assert_eq!(format!("{:b}", 1u8), "1");
    assert_eq!(format!("{:b}", 1u16), "1");
    assert_eq!(format!("{:b}", 1u32), "1");
    assert_eq!(format!("{:b}", 1u64), "1");
    assert_eq!(format!("{:x}", 1usize), "1");
    assert_eq!(format!("{:x}", 1u8), "1");
    assert_eq!(format!("{:x}", 1u16), "1");
    assert_eq!(format!("{:x}", 1u32), "1");
    assert_eq!(format!("{:x}", 1u64), "1");
    assert_eq!(format!("{:X}", 1usize), "1");
    assert_eq!(format!("{:X}", 1u8), "1");
    assert_eq!(format!("{:X}", 1u16), "1");
    assert_eq!(format!("{:X}", 1u32), "1");
    assert_eq!(format!("{:X}", 1u64), "1");
    assert_eq!(format!("{:o}", 1usize), "1");
    assert_eq!(format!("{:o}", 1u8), "1");
    assert_eq!(format!("{:o}", 1u16), "1");
    assert_eq!(format!("{:o}", 1u32), "1");
    assert_eq!(format!("{:o}", 1u64), "1");
    assert_eq!(format!("{:e}", 1u8), "1e0");
    assert_eq!(format!("{:e}", 1u16), "1e0");
    assert_eq!(format!("{:e}", 1u32), "1e0");
    assert_eq!(format!("{:e}", 1u64), "1e0");
    assert_eq!(format!("{:E}", 1u8), "1E0");
    assert_eq!(format!("{:E}", 1u16), "1E0");
    assert_eq!(format!("{:E}", 1u32), "1E0");
    assert_eq!(format!("{:E}", 1u64), "1E0");

    // Test a larger number
    assert_eq!(format!("{:b}", 55), "110111");
    assert_eq!(format!("{:o}", 55), "67");
    assert_eq!(format!("{}", 55), "55");
    assert_eq!(format!("{:x}", 55), "37");
    assert_eq!(format!("{:X}", 55), "37");
    assert_eq!(format!("{:e}", 55), "5.5e1");
    assert_eq!(format!("{:E}", 55), "5.5E1");
    assert_eq!(format!("{:e}", 10000000000u64), "1e10");
    assert_eq!(format!("{:E}", 10000000000u64), "1E10");
    assert_eq!(format!("{:e}", 10000000001u64), "1.0000000001e10");
    assert_eq!(format!("{:E}", 10000000001u64), "1.0000000001E10");
}

#[test]
fn test_format_int_exp_limits() {
    assert_eq!(format!("{:e}", i8::MIN), "-1.28e2");
    assert_eq!(format!("{:e}", i8::MAX), "1.27e2");
    assert_eq!(format!("{:e}", i16::MIN), "-3.2768e4");
    assert_eq!(format!("{:e}", i16::MAX), "3.2767e4");
    assert_eq!(format!("{:e}", i32::MIN), "-2.147483648e9");
    assert_eq!(format!("{:e}", i32::MAX), "2.147483647e9");
    assert_eq!(format!("{:e}", i64::MIN), "-9.223372036854775808e18");
    assert_eq!(format!("{:e}", i64::MAX), "9.223372036854775807e18");
    assert_eq!(format!("{:e}", i128::MIN), "-1.70141183460469231731687303715884105728e38");
    assert_eq!(format!("{:e}", i128::MAX), "1.70141183460469231731687303715884105727e38");

    assert_eq!(format!("{:e}", u8::MAX), "2.55e2");
    assert_eq!(format!("{:e}", u16::MAX), "6.5535e4");
    assert_eq!(format!("{:e}", u32::MAX), "4.294967295e9");
    assert_eq!(format!("{:e}", u64::MAX), "1.8446744073709551615e19");
    assert_eq!(format!("{:e}", u128::MAX), "3.40282366920938463463374607431768211455e38");
}

#[test]
fn test_format_int_exp_precision() {
    //test that float and integer match
    let big_int: u32 = 314_159_265;
    assert_eq!(format!("{big_int:.1e}"), format!("{:.1e}", f64::from(big_int)));

    // test adding precision
    assert_eq!(format!("{:.10e}", i8::MIN), "-1.2800000000e2");
    assert_eq!(format!("{:.10e}", i16::MIN), "-3.2768000000e4");
    assert_eq!(format!("{:.10e}", i32::MIN), "-2.1474836480e9");
    assert_eq!(format!("{:.20e}", i64::MIN), "-9.22337203685477580800e18");
    assert_eq!(format!("{:.40e}", i128::MIN), "-1.7014118346046923173168730371588410572800e38");

    // test rounding
    assert_eq!(format!("{:.1e}", i8::MIN), "-1.3e2");
    assert_eq!(format!("{:.1e}", i16::MIN), "-3.3e4");
    assert_eq!(format!("{:.1e}", i32::MIN), "-2.1e9");
    assert_eq!(format!("{:.1e}", i64::MIN), "-9.2e18");
    assert_eq!(format!("{:.1e}", i128::MIN), "-1.7e38");

    // test huge precision
    assert_eq!(format!("{:.1000e}", 1), format!("1.{}e0", "0".repeat(1000)));
    //test zero precision
    assert_eq!(format!("{:.0e}", 1), format!("1e0",));
    assert_eq!(format!("{:.0e}", 35), format!("4e1",));

    // test padding with precision (and sign)
    assert_eq!(format!("{:+10.3e}", 1), "  +1.000e0");
}

#[test]
fn new_test() {
    // test precision remains correct when rounding to next power
    assert_eq!(format!("{:.1e}", 999), "1.0e3");
    assert_eq!(format!("{:.1e}", 1001), "1.0e3");
    assert_eq!(format!("{:.1e}", 1000), "1.0e3");
    assert_eq!(format!("{:.0e}",  -999), "-1e3");
    assert_eq!(format!("{:.0e}",  -998), "-1e3");
    assert_eq!(format!("{:.0e}",  -997), "-1e3");
    assert_eq!(format!("{:.0e}",  -996), "-1e3");
    assert_eq!(format!("{:.0e}",  -995), "-1e3");
    assert_eq!(format!("{:.0e}",  -994), "-1e3");
    assert_eq!(format!("{:.0e}",  -993), "-1e3");
    assert_eq!(format!("{:.0e}",  -992), "-1e3");
    assert_eq!(format!("{:.0e}",  -991), "-1e3");
    assert_eq!(format!("{:.0e}",  -990), "-1e3");
    assert_eq!(format!("{:.0e}",  -989), "-1e3");
    assert_eq!(format!("{:.0e}",  -988), "-1e3");
    assert_eq!(format!("{:.0e}",  -987), "-1e3");
    assert_eq!(format!("{:.0e}",  -986), "-1e3");
    assert_eq!(format!("{:.0e}",  -985), "-1e3");
    assert_eq!(format!("{:.0e}",  -984), "-1e3");
    assert_eq!(format!("{:.0e}",  -983), "-1e3");
    assert_eq!(format!("{:.0e}",  -982), "-1e3");
    assert_eq!(format!("{:.0e}",  -981), "-1e3");
    assert_eq!(format!("{:.0e}",  -980), "-1e3");
    assert_eq!(format!("{:.0e}",  -979), "-1e3");
    assert_eq!(format!("{:.0e}",  -978), "-1e3");
    assert_eq!(format!("{:.0e}",  -977), "-1e3");
    assert_eq!(format!("{:.0e}",  -976), "-1e3");
    assert_eq!(format!("{:.0e}",  -975), "-1e3");
    assert_eq!(format!("{:.0e}",  -974), "-1e3");
    assert_eq!(format!("{:.0e}",  -973), "-1e3");
    assert_eq!(format!("{:.0e}",  -972), "-1e3");
    assert_eq!(format!("{:.0e}",  -971), "-1e3");
    assert_eq!(format!("{:.0e}",  -970), "-1e3");
    assert_eq!(format!("{:.0e}",  -969), "-1e3");
    assert_eq!(format!("{:.0e}",  -968), "-1e3");
    assert_eq!(format!("{:.0e}",  -967), "-1e3");
    assert_eq!(format!("{:.0e}",  -966), "-1e3");
    assert_eq!(format!("{:.0e}",  -965), "-1e3");
    assert_eq!(format!("{:.0e}",  -964), "-1e3");
    assert_eq!(format!("{:.0e}",  -963), "-1e3");
    assert_eq!(format!("{:.0e}",  -962), "-1e3");
    assert_eq!(format!("{:.0e}",  -961), "-1e3");
    assert_eq!(format!("{:.0e}",  -960), "-1e3");
    assert_eq!(format!("{:.0e}",  -959), "-1e3");
    assert_eq!(format!("{:.0e}",  -958), "-1e3");
    assert_eq!(format!("{:.0e}",  -957), "-1e3");
    assert_eq!(format!("{:.0e}",  -956), "-1e3");
    assert_eq!(format!("{:.0e}",  -955), "-1e3");
    assert_eq!(format!("{:.0e}",  -954), "-1e3");
    assert_eq!(format!("{:.0e}",  -953), "-1e3");
    assert_eq!(format!("{:.0e}",  -952), "-1e3");
    assert_eq!(format!("{:.0e}",  -951), "-1e3");
    assert_eq!(format!("{:.0e}",  -950), "-1e3");
    assert_eq!(format!("{:.0e}",  -850), "-9e2");
    assert_eq!(format!("{:.0e}",  -650), "-7e2");
    assert_eq!(format!("{:.0e}",  -450), "-5e2");
    assert_eq!(format!("{:.0e}",  -250), "-3e2");
    assert_eq!(format!("{:.0e}",   -99), "-1e2");
    assert_eq!(format!("{:.0e}",   -98), "-1e2");
    assert_eq!(format!("{:.0e}",   -97), "-1e2");
    assert_eq!(format!("{:.0e}",   -96), "-1e2");
    assert_eq!(format!("{:.0e}",   -95), "-1e2");
    assert_eq!(format!("{:.0e}",   -85), "-9e1");
    assert_eq!(format!("{:.0e}",   -65), "-7e1");
    assert_eq!(format!("{:.0e}",   -45), "-5e1");
    assert_eq!(format!("{:.0e}",   -25), "-3e1");
    assert_eq!(format!("{:.0e}",    25), "3e1");
    assert_eq!(format!("{:.0e}",    45), "5e1");
    assert_eq!(format!("{:.0e}",    65), "7e1");
    assert_eq!(format!("{:.0e}",    85), "9e1");
    assert_eq!(format!("{:.0e}",    94), "9e1");
    assert_eq!(format!("{:.0e}",    95), "1e2");
    assert_eq!(format!("{:.0e}",    96), "1e2");
    assert_eq!(format!("{:.0e}",    97), "1e2");
    assert_eq!(format!("{:.0e}",    98), "1e2");
    assert_eq!(format!("{:.0e}",    99), "1e2");
    assert_eq!(format!("{:.0e}",   250), "3e2");
    assert_eq!(format!("{:.0e}",   450), "5e2");
    assert_eq!(format!("{:.0e}",   650), "7e2");
    assert_eq!(format!("{:.0e}",   850), "9e2");
    assert_eq!(format!("{:.0e}",   950), "1e3");
    assert_eq!(format!("{:.0e}",   951), "1e3");
    assert_eq!(format!("{:.0e}",   952), "1e3");
    assert_eq!(format!("{:.0e}",   953), "1e3");
    assert_eq!(format!("{:.0e}",   954), "1e3");
    assert_eq!(format!("{:.0e}",   955), "1e3");
    assert_eq!(format!("{:.0e}",   956), "1e3");
    assert_eq!(format!("{:.0e}",   957), "1e3");
    assert_eq!(format!("{:.0e}",   958), "1e3");
    assert_eq!(format!("{:.0e}",   959), "1e3");
    assert_eq!(format!("{:.0e}",   960), "1e3");
    assert_eq!(format!("{:.0e}",   961), "1e3");
    assert_eq!(format!("{:.0e}",   962), "1e3");
    assert_eq!(format!("{:.0e}",   963), "1e3");
    assert_eq!(format!("{:.0e}",   964), "1e3");
    assert_eq!(format!("{:.0e}",   965), "1e3");
    assert_eq!(format!("{:.0e}",   966), "1e3");
    assert_eq!(format!("{:.0e}",   967), "1e3");
    assert_eq!(format!("{:.0e}",   968), "1e3");
    assert_eq!(format!("{:.0e}",   969), "1e3");
    assert_eq!(format!("{:.0e}",   970), "1e3");
    assert_eq!(format!("{:.0e}",   971), "1e3");
    assert_eq!(format!("{:.0e}",   972), "1e3");
    assert_eq!(format!("{:.0e}",   973), "1e3");
    assert_eq!(format!("{:.0e}",   974), "1e3");
    assert_eq!(format!("{:.0e}",   975), "1e3");
    assert_eq!(format!("{:.0e}",   976), "1e3");
    assert_eq!(format!("{:.0e}",   977), "1e3");
    assert_eq!(format!("{:.0e}",   978), "1e3");
    assert_eq!(format!("{:.0e}",   979), "1e3");
    assert_eq!(format!("{:.0e}",   980), "1e3");
    assert_eq!(format!("{:.0e}",   981), "1e3");
    assert_eq!(format!("{:.0e}",   982), "1e3");
    assert_eq!(format!("{:.0e}",   983), "1e3");
    assert_eq!(format!("{:.0e}",   984), "1e3");
    assert_eq!(format!("{:.0e}",   985), "1e3");
    assert_eq!(format!("{:.0e}",   986), "1e3");
    assert_eq!(format!("{:.0e}",   987), "1e3");
    assert_eq!(format!("{:.0e}",   988), "1e3");
    assert_eq!(format!("{:.0e}",   989), "1e3");
    assert_eq!(format!("{:.0e}",   990), "1e3");
    assert_eq!(format!("{:.0e}",   991), "1e3");
    assert_eq!(format!("{:.0e}",   992), "1e3");
    assert_eq!(format!("{:.0e}",   993), "1e3");
    assert_eq!(format!("{:.0e}",   994), "1e3");
    assert_eq!(format!("{:.0e}",   995), "1e3");
    assert_eq!(format!("{:.0e}",   996), "1e3");
    assert_eq!(format!("{:.0e}",   997), "1e3");
    assert_eq!(format!("{:.0e}",   998), "1e3");
    assert_eq!(format!("{:.0e}",   999), "1e3");
    assert_eq!(format!("{:.1e}", -1850), "-1.9e3");
    assert_eq!(format!("{:.1e}", -1650), "-1.7e3");
    assert_eq!(format!("{:.1e}", -1450), "-1.5e3");
    assert_eq!(format!("{:.1e}", -1250), "-1.3e3");
    assert_eq!(format!("{:.1e}", -1050), "-1.1e3");
    assert_eq!(format!("{:.1e}",  -999), "-1.0e3");
    assert_eq!(format!("{:.1e}",  -998), "-1.0e3");
    assert_eq!(format!("{:.1e}",  -997), "-1.0e3");
    assert_eq!(format!("{:.1e}",  -996), "-1.0e3");
    assert_eq!(format!("{:.1e}",  -995), "-1.0e3");
    assert_eq!(format!("{:.1e}",  -985), "-9.9e2");
    assert_eq!(format!("{:.1e}",  -965), "-9.7e2");
    assert_eq!(format!("{:.1e}",  -945), "-9.5e2");
    assert_eq!(format!("{:.1e}",  -925), "-9.3e2");
    assert_eq!(format!("{:.1e}",  -905), "-9.1e2");
    assert_eq!(format!("{:.1e}",  -885), "-8.9e2");
    assert_eq!(format!("{:.1e}",  -865), "-8.7e2");
    assert_eq!(format!("{:.1e}",  -845), "-8.5e2");
    assert_eq!(format!("{:.1e}",  -825), "-8.3e2");
    assert_eq!(format!("{:.1e}",  -805), "-8.1e2");
    assert_eq!(format!("{:.1e}",  -785), "-7.9e2");
    assert_eq!(format!("{:.1e}",  -765), "-7.7e2");
    assert_eq!(format!("{:.1e}",  -745), "-7.5e2");
    assert_eq!(format!("{:.1e}",  -725), "-7.3e2");
    assert_eq!(format!("{:.1e}",  -705), "-7.1e2");
    assert_eq!(format!("{:.1e}",  -685), "-6.9e2");
    assert_eq!(format!("{:.1e}",  -665), "-6.7e2");
    assert_eq!(format!("{:.1e}",  -645), "-6.5e2");
    assert_eq!(format!("{:.1e}",  -625), "-6.3e2");
    assert_eq!(format!("{:.1e}",  -605), "-6.1e2");
    assert_eq!(format!("{:.1e}",  -585), "-5.9e2");
    assert_eq!(format!("{:.1e}",  -565), "-5.7e2");
    assert_eq!(format!("{:.1e}",  -545), "-5.5e2");
    assert_eq!(format!("{:.1e}",  -525), "-5.3e2");
    assert_eq!(format!("{:.1e}",  -505), "-5.1e2");
    assert_eq!(format!("{:.1e}",  -485), "-4.9e2");
    assert_eq!(format!("{:.1e}",  -465), "-4.7e2");
    assert_eq!(format!("{:.1e}",  -445), "-4.5e2");
    assert_eq!(format!("{:.1e}",  -425), "-4.3e2");
    assert_eq!(format!("{:.1e}",  -405), "-4.1e2");
    assert_eq!(format!("{:.1e}",  -385), "-3.9e2");
    assert_eq!(format!("{:.1e}",  -365), "-3.7e2");
    assert_eq!(format!("{:.1e}",  -345), "-3.5e2");
    assert_eq!(format!("{:.1e}",  -325), "-3.3e2");
    assert_eq!(format!("{:.1e}",  -305), "-3.1e2");
    assert_eq!(format!("{:.1e}",  -285), "-2.9e2");
    assert_eq!(format!("{:.1e}",  -265), "-2.7e2");
    assert_eq!(format!("{:.1e}",  -245), "-2.5e2");
    assert_eq!(format!("{:.1e}",  -225), "-2.3e2");
    assert_eq!(format!("{:.1e}",  -205), "-2.1e2");
    assert_eq!(format!("{:.1e}",  -185), "-1.9e2");
    assert_eq!(format!("{:.1e}",  -165), "-1.7e2");
    assert_eq!(format!("{:.1e}",  -145), "-1.5e2");
    assert_eq!(format!("{:.1e}",  -125), "-1.3e2");
    assert_eq!(format!("{:.1e}",  -105), "-1.1e2");
    assert_eq!(format!("{:.1e}",   105), "1.1e2");
    assert_eq!(format!("{:.1e}",   125), "1.3e2");
    assert_eq!(format!("{:.1e}",   145), "1.5e2");
    assert_eq!(format!("{:.1e}",   165), "1.7e2");
    assert_eq!(format!("{:.1e}",   185), "1.9e2");
    assert_eq!(format!("{:.1e}",   205), "2.1e2");
    assert_eq!(format!("{:.1e}",   225), "2.3e2");
    assert_eq!(format!("{:.1e}",   245), "2.5e2");
    assert_eq!(format!("{:.1e}",   265), "2.7e2");
    assert_eq!(format!("{:.1e}",   285), "2.9e2");
    assert_eq!(format!("{:.1e}",   305), "3.1e2");
    assert_eq!(format!("{:.1e}",   325), "3.3e2");
    assert_eq!(format!("{:.1e}",   345), "3.5e2");
    assert_eq!(format!("{:.1e}",   365), "3.7e2");
    assert_eq!(format!("{:.1e}",   385), "3.9e2");
    assert_eq!(format!("{:.1e}",   405), "4.1e2");
    assert_eq!(format!("{:.1e}",   425), "4.3e2");
    assert_eq!(format!("{:.1e}",   445), "4.5e2");
    assert_eq!(format!("{:.1e}",   465), "4.7e2");
    assert_eq!(format!("{:.1e}",   485), "4.9e2");
    assert_eq!(format!("{:.1e}",   505), "5.1e2");
    assert_eq!(format!("{:.1e}",   525), "5.3e2");
    assert_eq!(format!("{:.1e}",   545), "5.5e2");
    assert_eq!(format!("{:.1e}",   565), "5.7e2");
    assert_eq!(format!("{:.1e}",   585), "5.9e2");
    assert_eq!(format!("{:.1e}",   605), "6.1e2");
    assert_eq!(format!("{:.1e}",   625), "6.3e2");
    assert_eq!(format!("{:.1e}",   645), "6.5e2");
    assert_eq!(format!("{:.1e}",   665), "6.7e2");
    assert_eq!(format!("{:.1e}",   685), "6.9e2");
    assert_eq!(format!("{:.1e}",   705), "7.1e2");
    assert_eq!(format!("{:.1e}",   725), "7.3e2");
    assert_eq!(format!("{:.1e}",   745), "7.5e2");
    assert_eq!(format!("{:.1e}",   765), "7.7e2");
    assert_eq!(format!("{:.1e}",   785), "7.9e2");
    assert_eq!(format!("{:.1e}",   805), "8.1e2");
    assert_eq!(format!("{:.1e}",   825), "8.3e2");
    assert_eq!(format!("{:.1e}",   845), "8.5e2");
    assert_eq!(format!("{:.1e}",   865), "8.7e2");
    assert_eq!(format!("{:.1e}",   885), "8.9e2");
    assert_eq!(format!("{:.1e}",   905), "9.1e2");
    assert_eq!(format!("{:.1e}",   925), "9.3e2");
    assert_eq!(format!("{:.1e}",   945), "9.5e2");
    assert_eq!(format!("{:.1e}",   965), "9.7e2");
    assert_eq!(format!("{:.1e}",   985), "9.9e2");
    assert_eq!(format!("{:.1e}",   995), "1.0e3");
    assert_eq!(format!("{:.1e}",   996), "1.0e3");
    assert_eq!(format!("{:.1e}",   997), "1.0e3");
    assert_eq!(format!("{:.1e}",   998), "1.0e3");
    assert_eq!(format!("{:.1e}",   999), "1.0e3");
    assert_eq!(format!("{:.1e}",  1050), "1.1e3");
    assert_eq!(format!("{:.1e}",  1250), "1.3e3");
    assert_eq!(format!("{:.1e}",  1450), "1.5e3");
    assert_eq!(format!("{:.1e}",  1650), "1.7e3");
    assert_eq!(format!("{:.1e}",  1850), "1.9e3");
    assert_eq!(format!("{:.2e}", -1985), "-1.99e3");
    assert_eq!(format!("{:.2e}", -1965), "-1.97e3");
    assert_eq!(format!("{:.2e}", -1945), "-1.95e3");
    assert_eq!(format!("{:.2e}", -1925), "-1.93e3");
    assert_eq!(format!("{:.2e}", -1905), "-1.91e3");
    assert_eq!(format!("{:.2e}", -1885), "-1.89e3");
    assert_eq!(format!("{:.2e}", -1865), "-1.87e3");
    assert_eq!(format!("{:.2e}", -1845), "-1.85e3");
    assert_eq!(format!("{:.2e}", -1825), "-1.83e3");
    assert_eq!(format!("{:.2e}", -1805), "-1.81e3");
    assert_eq!(format!("{:.2e}", -1785), "-1.79e3");
    assert_eq!(format!("{:.2e}", -1765), "-1.77e3");
    assert_eq!(format!("{:.2e}", -1745), "-1.75e3");
    assert_eq!(format!("{:.2e}", -1725), "-1.73e3");
    assert_eq!(format!("{:.2e}", -1705), "-1.71e3");
    assert_eq!(format!("{:.2e}", -1685), "-1.69e3");
    assert_eq!(format!("{:.2e}", -1665), "-1.67e3");
    assert_eq!(format!("{:.2e}", -1645), "-1.65e3");
    assert_eq!(format!("{:.2e}", -1625), "-1.63e3");
    assert_eq!(format!("{:.2e}", -1605), "-1.61e3");
    assert_eq!(format!("{:.2e}", -1585), "-1.59e3");
    assert_eq!(format!("{:.2e}", -1565), "-1.57e3");
    assert_eq!(format!("{:.2e}", -1545), "-1.55e3");
    assert_eq!(format!("{:.2e}", -1525), "-1.53e3");
    assert_eq!(format!("{:.2e}", -1505), "-1.51e3");
    assert_eq!(format!("{:.2e}", -1485), "-1.49e3");
    assert_eq!(format!("{:.2e}", -1465), "-1.47e3");
    assert_eq!(format!("{:.2e}", -1445), "-1.45e3");
    assert_eq!(format!("{:.2e}", -1425), "-1.43e3");
    assert_eq!(format!("{:.2e}", -1405), "-1.41e3");
    assert_eq!(format!("{:.2e}", -1385), "-1.39e3");
    assert_eq!(format!("{:.2e}", -1365), "-1.37e3");
    assert_eq!(format!("{:.2e}", -1345), "-1.35e3");
    assert_eq!(format!("{:.2e}", -1325), "-1.33e3");
    assert_eq!(format!("{:.2e}", -1305), "-1.31e3");
    assert_eq!(format!("{:.2e}", -1285), "-1.29e3");
    assert_eq!(format!("{:.2e}", -1265), "-1.27e3");
    assert_eq!(format!("{:.2e}", -1245), "-1.25e3");
    assert_eq!(format!("{:.2e}", -1225), "-1.23e3");
    assert_eq!(format!("{:.2e}", -1205), "-1.21e3");
    assert_eq!(format!("{:.2e}", -1185), "-1.19e3");
    assert_eq!(format!("{:.2e}", -1165), "-1.17e3");
    assert_eq!(format!("{:.2e}", -1145), "-1.15e3");
    assert_eq!(format!("{:.2e}", -1125), "-1.13e3");
    assert_eq!(format!("{:.2e}", -1105), "-1.11e3");
    assert_eq!(format!("{:.2e}", -1085), "-1.09e3");
    assert_eq!(format!("{:.2e}", -1065), "-1.07e3");
    assert_eq!(format!("{:.2e}", -1045), "-1.05e3");
    assert_eq!(format!("{:.2e}", -1025), "-1.03e3");
    assert_eq!(format!("{:.2e}", -1005), "-1.01e3");
    assert_eq!(format!("{:.2e}",  1005), "1.01e3" );
    assert_eq!(format!("{:.2e}",  1025), "1.03e3" );
    assert_eq!(format!("{:.2e}",  1045), "1.05e3" );
    assert_eq!(format!("{:.2e}",  1065), "1.07e3" );
    assert_eq!(format!("{:.2e}",  1085), "1.09e3" );
    assert_eq!(format!("{:.2e}",  1105), "1.11e3" );
    assert_eq!(format!("{:.2e}",  1125), "1.13e3" );
    assert_eq!(format!("{:.2e}",  1145), "1.15e3" );
    assert_eq!(format!("{:.2e}",  1165), "1.17e3" );
    assert_eq!(format!("{:.2e}",  1185), "1.19e3" );
    assert_eq!(format!("{:.2e}",  1205), "1.21e3" );
    assert_eq!(format!("{:.2e}",  1225), "1.23e3" );
    assert_eq!(format!("{:.2e}",  1245), "1.25e3" );
    assert_eq!(format!("{:.2e}",  1265), "1.27e3" );
    assert_eq!(format!("{:.2e}",  1285), "1.29e3" );
    assert_eq!(format!("{:.2e}",  1305), "1.31e3" );
    assert_eq!(format!("{:.2e}",  1325), "1.33e3" );
    assert_eq!(format!("{:.2e}",  1345), "1.35e3" );
    assert_eq!(format!("{:.2e}",  1365), "1.37e3" );
    assert_eq!(format!("{:.2e}",  1385), "1.39e3" );
    assert_eq!(format!("{:.2e}",  1405), "1.41e3" );
    assert_eq!(format!("{:.2e}",  1425), "1.43e3" );
    assert_eq!(format!("{:.2e}",  1445), "1.45e3" );
    assert_eq!(format!("{:.2e}",  1465), "1.47e3" );
    assert_eq!(format!("{:.2e}",  1485), "1.49e3" );
    assert_eq!(format!("{:.2e}",  1505), "1.51e3" );
    assert_eq!(format!("{:.2e}",  1525), "1.53e3" );
    assert_eq!(format!("{:.2e}",  1545), "1.55e3" );
    assert_eq!(format!("{:.2e}",  1565), "1.57e3" );
    assert_eq!(format!("{:.2e}",  1585), "1.59e3" );
    assert_eq!(format!("{:.2e}",  1605), "1.61e3" );
    assert_eq!(format!("{:.2e}",  1625), "1.63e3" );
    assert_eq!(format!("{:.2e}",  1645), "1.65e3" );
    assert_eq!(format!("{:.2e}",  1665), "1.67e3" );
    assert_eq!(format!("{:.2e}",  1685), "1.69e3" );
    assert_eq!(format!("{:.2e}",  1705), "1.71e3" );
    assert_eq!(format!("{:.2e}",  1725), "1.73e3" );
    assert_eq!(format!("{:.2e}",  1745), "1.75e3" );
    assert_eq!(format!("{:.2e}",  1765), "1.77e3" );
    assert_eq!(format!("{:.2e}",  1785), "1.79e3" );
    assert_eq!(format!("{:.2e}",  1805), "1.81e3" );
    assert_eq!(format!("{:.2e}",  1825), "1.83e3" );
    assert_eq!(format!("{:.2e}",  1845), "1.85e3" );
    assert_eq!(format!("{:.2e}",  1865), "1.87e3" );
    assert_eq!(format!("{:.2e}",  1885), "1.89e3" );
    assert_eq!(format!("{:.2e}",  1905), "1.91e3" );
    assert_eq!(format!("{:.2e}",  1925), "1.93e3" );
    assert_eq!(format!("{:.2e}",  1945), "1.95e3" );
    assert_eq!(format!("{:.2e}",  1965), "1.97e3" );
    assert_eq!(format!("{:.2e}",  1985), "1.99e3" );
}

#[test]
fn test_format_int_zero() {
    assert_eq!(format!("{}", 0), "0");
    assert_eq!(format!("{:?}", 0), "0");
    assert_eq!(format!("{:b}", 0), "0");
    assert_eq!(format!("{:o}", 0), "0");
    assert_eq!(format!("{:x}", 0), "0");
    assert_eq!(format!("{:X}", 0), "0");
    assert_eq!(format!("{:e}", 0), "0e0");
    assert_eq!(format!("{:E}", 0), "0E0");

    assert_eq!(format!("{}", 0u32), "0");
    assert_eq!(format!("{:?}", 0u32), "0");
    assert_eq!(format!("{:b}", 0u32), "0");
    assert_eq!(format!("{:o}", 0u32), "0");
    assert_eq!(format!("{:x}", 0u32), "0");
    assert_eq!(format!("{:X}", 0u32), "0");
    assert_eq!(format!("{:e}", 0u32), "0e0");
    assert_eq!(format!("{:E}", 0u32), "0E0");
}

#[test]
fn test_format_int_flags() {
    assert_eq!(format!("{:3}", 1), "  1");
    assert_eq!(format!("{:>3}", 1), "  1");
    assert_eq!(format!("{:>+3}", 1), " +1");
    assert_eq!(format!("{:<3}", 1), "1  ");
    assert_eq!(format!("{:#}", 1), "1");
    assert_eq!(format!("{:#x}", 10), "0xa");
    assert_eq!(format!("{:#X}", 10), "0xA");
    assert_eq!(format!("{:#5x}", 10), "  0xa");
    assert_eq!(format!("{:#o}", 10), "0o12");
    assert_eq!(format!("{:08x}", 10), "0000000a");
    assert_eq!(format!("{:8x}", 10), "       a");
    assert_eq!(format!("{:<8x}", 10), "a       ");
    assert_eq!(format!("{:>8x}", 10), "       a");
    assert_eq!(format!("{:#08x}", 10), "0x00000a");
    assert_eq!(format!("{:08}", -10), "-0000010");
    assert_eq!(format!("{:x}", !0u8), "ff");
    assert_eq!(format!("{:X}", !0u8), "FF");
    assert_eq!(format!("{:b}", !0u8), "11111111");
    assert_eq!(format!("{:o}", !0u8), "377");
    assert_eq!(format!("{:#x}", !0u8), "0xff");
    assert_eq!(format!("{:#X}", !0u8), "0xFF");
    assert_eq!(format!("{:#b}", !0u8), "0b11111111");
    assert_eq!(format!("{:#o}", !0u8), "0o377");
}

#[test]
fn test_format_int_sign_padding() {
    assert_eq!(format!("{:+5}", 1), "   +1");
    assert_eq!(format!("{:+5}", -1), "   -1");
    assert_eq!(format!("{:05}", 1), "00001");
    assert_eq!(format!("{:05}", -1), "-0001");
    assert_eq!(format!("{:+05}", 1), "+0001");
    assert_eq!(format!("{:+05}", -1), "-0001");
}

#[test]
fn test_format_int_twos_complement() {
    assert_eq!(format!("{}", i8::MIN), "-128");
    assert_eq!(format!("{}", i16::MIN), "-32768");
    assert_eq!(format!("{}", i32::MIN), "-2147483648");
    assert_eq!(format!("{}", i64::MIN), "-9223372036854775808");
}

#[test]
fn test_format_debug_hex() {
    assert_eq!(format!("{:02x?}", b"Foo\0"), "[46, 6f, 6f, 00]");
    assert_eq!(format!("{:02X?}", b"Foo\0"), "[46, 6F, 6F, 00]");
}
